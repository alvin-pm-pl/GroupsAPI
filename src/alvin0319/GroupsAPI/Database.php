<?php

/*
 * Auto-generated by libasynql-fx
 * Created from mysql.sql
 */

declare(strict_types=1);

namespace alvin0319\GroupsAPI;

use Generator;
use poggit\libasynql\DataConnector;
use SOFe\AwaitGenerator\Await;

final class Database{
	public function __construct(private DataConnector $conn){ }

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:16
	 *
	 * @param string $name
	 * @param string $permission
	 * @param int    $priority
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function createGroup(string $name, string $permission, int $priority) : Generator{
		$this->conn->executeInsert("groupsapi.create_group", ["name" => $name, "permission" => $permission, "priority" => $priority], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:22
	 *
	 * @param string $name
	 * @param string $group_list
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function createUser(string $name, string $group_list) : Generator{
		$this->conn->executeInsert("groupsapi.create_user", ["name" => $name, "group_list" => $group_list], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:9
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function createDefaultGroupTable() : Generator{
		$this->conn->executeChange("groupsapi.default_group_table", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:47
	 *
	 * @param string $name
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function deleteGroup(string $name) : Generator{
		$this->conn->executeChange("groupsapi.delete_group", ["name" => $name], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:31
	 *
	 * @param string $name
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getGroup(string $name) : Generator{
		$this->conn->executeSelect("groupsapi.get_group", ["name" => $name], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:26
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getGroups() : Generator{
		$this->conn->executeSelect("groupsapi.get_groups", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:36
	 *
	 * @param string $name
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getUser(string $name) : Generator{
		$this->conn->executeSelect("groupsapi.get_user", ["name" => $name], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:5
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function init() : Generator{
		$this->conn->executeChange("groupsapi.init", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:54
	 *
	 * @param string $name
	 * @param string $permission
	 * @param int    $priority
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function updateGroup(string $name, string $permission, int $priority) : Generator{
		$this->conn->executeChange("groupsapi.update_group", ["name" => $name, "permission" => $permission, "priority" => $priority], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:42
	 *
	 * @param string $name
	 * @param string $group_list
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function updateUser(string $name, string $group_list) : Generator{
		$this->conn->executeChange("groupsapi.update_user", ["name" => $name, "group_list" => $group_list], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}
}
